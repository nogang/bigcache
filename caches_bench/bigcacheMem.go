package main

import "C"
import (
	"fmt"
	"time"
	"github.com/allegro/bigcache"
	"runtime"
	"sync"
	"github.com/hashicorp/golang-lru"
	"math/rand"
	"math"
	"github.com/ground-x/go-gxplatform/common"
	"github.com/ground-x/go-gxplatform/core/types"
     _ "net/http/pprof"
	"net/http"
	"log"
	"github.com/ground-x/go-gxplatform/rlp"
	"unsafe"
	)
var maxGoroutine int
var wg sync.WaitGroup

const MAXGO = 10

func maina(){
	maxGoroutine = 1
	go func() {
		log.Println(http.ListenAndServe("localhost:6060", nil))
	}()

	//memBigCacheTest()
	//memALUTest()
	//printMem()
	//GCTest()
	//testCompareBigCacheLRU()
	//testRLPBench()
}
const testCount = 10000000
func testRLPBench(body types.Body, bytes []byte){
	//var body types.Body
	//rlp.DecodeBytes(bytes, &body)

	testRLPEncode(bytes)
	testRLPDecode(&body)
}

func testRLPEncode(bytes []byte){
	var body types.Body
	start := time.Now()
	for i := 0 ; i < testCount ; i++ {
		rlp.DecodeBytes(bytes, &body)
	}
	elapsedTime := time.Since(start)
	fmt.Printf("%s\n",elapsedTime/testCount)
}

func testRLPDecode(body *types.Body){
	start := time.Now()
	for i:= 0 ; i < testCount ; i++ {
		_, e := rlp.EncodeToBytes(body)
		if e != nil {
			fmt.Print("error")
		}
	}
	elapsedTime := time.Since(start)
	fmt.Printf("%s\n",elapsedTime/testCount)
}

func testCompareBigCacheLRU(){
	hashkey := newHashKey(1000000)
	lrucache, _ := lru.New(256)
	bigcache := newBigCache()

	testLRUCache(lrucache, hashkey)
	testBigCache(bigcache, hashkey)
}
func testBigCache(bigcache *bigcache.BigCache, hashkey []common.Hash) {
	AddBlockBigCache(bigcache, hashkey)
	start := time.Now()
	wg.Add(MAXGO)
	for i := 0 ; i < MAXGO ; i++ {
		go func(){
			GetBlcokBigCache(bigcache, hashkey)
		}()
	}
	wg.Wait()
	elapsedTime := time.Since(start)
	fmt.Printf("%s\n",elapsedTime)
}

func testLRUCache(lrucache *lru.Cache,hashkey []common.Hash){
	testAddBlockLRU(lrucache, hashkey)
	testGetBlockLRU(lrucache, hashkey)
}

func testGetBlockLRU(lrucache *lru.Cache, hashkey []common.Hash){
	start := time.Now()
	wg.Add(MAXGO)
	for i := 0 ; i < MAXGO ; i++ {
		go func(){
			GetBlockLRU(lrucache, hashkey)
		}()
	}
	wg.Wait()
	elapsedTime := time.Since(start)
	fmt.Printf("%s\n",elapsedTime)
}

func newHashKey(keyCount int) []common.Hash {
	hash := make([]common.Hash,0)
	for j := 0 ; j < keyCount ; j++ {
		var ch common.Hash
		for i:=0 ; i < 32 ; i++ {
			ch[i] = byte(rand.Int()%256)
		}
		hash = append(hash, ch)
	}
	return hash
}

func newBigCache() *bigcache.BigCache {
	bigcache, _ := bigcache.NewBigCache(bigcache.Config{
		Shards:             256,
		LifeWindow:         100 * time.Second,
		CleanWindow:  		0,
		MaxEntriesInWindow: 2000000,
		MaxEntrySize:       1024*4,
		Verbose:            false,
	})

	return bigcache
}
func GetBlockLRU(cache *lru.Cache, hash []common.Hash){
	defer wg.Done()
	for _, h := range hash {
		cache.Get(h)
	}
}

func testAddBlockLRU(cache *lru.Cache,hash []common.Hash){
	var b *types.Block
	start := time.Now()
	for _, h := range hash {
		cache.Add(h,b)
	}

	elapsedTime := time.Since(start)
	fmt.Printf("%s\n",elapsedTime)
}

func GetBlcokBigCache(cache *bigcache.BigCache,hash []common.Hash){
	var body types.Body
	defer wg.Done()

	for _, h := range hash {
		bytes, e := cache.Get(string(h[:]))

		rlp.DecodeBytes(bytes, &body)
		if e != nil{
			fmt.Print(e.Error())
		}
	}
}

func AddBlockBigCache(cache *bigcache.BigCache,hash []common.Hash){
	data := []byte{249,11,100,249,11,96,248,102,130,8,107,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,5,17,113,130,8,73,71,234,197,108,195,239,95,217,69,23,44,187,200,116,33,24,198,221,47,233,246,167,250,62,194,20,160,88,142,88,157,221,13,242,44,79,53,35,81,61,150,79,127,100,9,34,245,22,145,126,197,12,255,229,91,119,33,210,171,248,102,130,8,108,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,37,196,187,207,12,177,225,46,28,97,133,75,249,38,170,96,108,200,70,166,46,205,43,216,245,217,95,204,144,14,230,224,160,82,239,116,63,136,59,136,63,15,18,118,191,133,207,103,198,250,24,89,237,33,3,195,142,119,16,233,108,148,227,196,141,248,102,130,8,109,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,72,253,108,198,253,216,19,29,56,149,112,37,122,95,2,210,184,0,250,74,111,108,142,81,248,79,148,3,25,7,60,26,160,22,120,16,62,0,87,252,48,209,104,217,24,125,19,116,253,50,63,172,247,116,21,156,151,150,155,248,158,137,5,221,41,248,102,130,8,110,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,191,95,2,45,249,204,206,110,66,149,43,30,59,234,143,60,17,94,161,234,180,234,186,175,178,217,42,246,252,29,3,183,160,83,159,98,254,207,81,203,78,151,27,214,99,49,103,29,221,35,201,166,166,93,192,68,217,92,100,59,158,241,87,228,166,248,102,130,8,111,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,69,227,73,96,67,156,147,121,12,112,213,227,0,229,85,158,105,218,215,58,144,111,7,93,53,136,5,50,99,184,180,163,160,108,108,77,174,241,60,113,53,37,238,47,29,44,109,26,58,181,57,73,177,72,162,196,211,1,217,111,10,224,118,147,36,248,102,130,8,112,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,177,13,91,215,211,200,71,233,153,55,90,50,128,52,19,208,14,44,12,18,87,180,191,22,89,81,13,81,97,215,172,188,160,99,202,169,21,29,55,200,182,34,76,29,158,79,136,89,49,151,127,196,149,59,201,33,107,45,45,14,216,156,250,197,188,248,102,130,8,113,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,122,179,202,193,86,137,150,175,53,89,190,142,132,74,226,59,30,43,201,86,106,218,34,4,75,25,143,114,82,189,172,185,160,37,45,82,219,13,191,33,8,71,203,233,20,33,3,223,226,248,202,166,220,22,109,229,19,13,128,232,76,203,216,50,25,248,102,130,8,114,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,106,89,47,235,192,213,49,129,218,148,91,239,2,141,147,243,54,44,231,180,248,246,74,199,227,42,137,125,200,203,232,211,160,41,172,202,189,90,32,41,176,77,112,81,133,181,169,133,6,28,168,96,10,25,164,220,3,103,117,158,20,73,159,68,90,248,102,130,8,115,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,142,181,45,73,32,127,76,144,198,18,227,211,15,129,162,90,138,169,152,108,102,151,4,194,233,116,105,49,186,85,12,25,160,32,92,66,185,235,165,213,11,166,77,161,112,65,150,29,124,151,203,0,207,244,156,10,246,35,240,210,231,107,106,160,229,248,102,130,8,116,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,184,163,140,218,70,152,209,100,122,15,44,218,121,231,215,194,41,183,77,188,17,71,137,4,92,99,79,106,174,114,249,86,160,42,169,58,242,154,159,254,33,31,59,77,45,177,11,191,180,181,113,187,240,108,102,232,182,22,68,76,198,90,70,37,182,248,102,130,8,117,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,162,74,187,14,177,207,181,76,193,122,56,64,82,194,37,200,11,245,187,59,139,121,214,171,50,178,202,164,120,198,202,236,160,28,219,154,240,42,111,141,155,110,180,168,146,222,109,84,25,110,129,35,62,45,45,67,120,183,48,99,163,83,98,170,105,248,102,130,8,118,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,93,209,218,179,235,164,80,57,153,76,203,65,228,111,154,88,77,81,62,207,161,29,249,3,212,82,28,149,14,221,76,213,160,113,147,158,8,170,3,145,227,34,79,32,6,131,229,54,103,154,161,9,214,230,51,55,159,8,229,228,181,17,109,132,156,248,102,130,8,119,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,203,10,109,80,27,159,84,118,49,245,198,186,190,131,73,100,194,27,58,209,31,104,186,187,49,16,23,151,105,74,128,222,160,80,71,78,202,239,114,236,158,66,125,220,158,92,159,13,42,137,191,218,61,180,31,72,240,71,167,38,211,30,171,136,163,248,102,130,8,120,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,57,16,56,140,60,97,105,111,249,91,101,197,78,249,38,159,72,165,216,163,223,94,163,178,61,176,17,171,143,182,247,72,160,103,182,245,127,220,237,102,29,58,96,85,220,110,53,124,166,152,181,35,73,254,242,151,125,229,235,135,58,250,50,98,86,248,102,130,8,121,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,31,38,206,41,134,244,151,216,72,230,131,99,231,207,233,1,125,138,45,111,9,147,140,63,104,136,224,157,238,77,27,227,160,14,103,80,127,235,39,155,19,131,200,204,87,125,42,39,147,8,10,54,206,65,207,219,109,166,96,250,221,164,58,45,7,248,102,130,8,122,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,42,139,215,20,123,103,207,232,94,222,185,204,14,41,3,217,216,99,158,183,106,96,12,165,251,57,65,43,254,208,243,204,160,56,17,86,228,61,54,70,15,234,141,89,52,164,90,175,19,24,203,97,133,254,109,174,181,227,112,68,111,199,40,204,56,248,102,130,8,123,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,177,115,32,47,123,122,127,101,8,1,113,245,175,250,171,247,249,69,209,58,228,13,63,128,38,218,152,107,53,189,33,171,160,127,74,208,44,214,215,108,7,5,247,155,78,197,12,223,219,245,119,198,78,99,29,43,187,213,247,247,121,169,210,243,210,248,102,130,8,124,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,47,118,138,181,5,78,100,3,215,202,124,220,204,113,227,80,239,24,92,133,157,33,17,91,161,3,130,184,193,29,114,147,160,84,32,37,140,148,237,156,221,13,95,164,3,111,140,108,63,252,180,211,106,196,193,58,167,237,212,26,232,16,221,20,180,248,102,130,8,125,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,25,207,97,162,221,48,137,30,78,171,28,203,47,173,64,205,194,67,215,120,44,89,124,213,203,237,89,222,245,7,100,14,160,123,168,53,197,245,35,21,93,174,124,220,253,204,152,192,38,255,14,8,94,224,72,108,117,20,113,190,247,216,206,52,135,248,102,130,8,126,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,237,228,127,246,229,59,106,89,73,82,243,43,42,196,96,40,182,113,255,194,84,0,144,220,32,233,80,26,156,14,136,196,160,123,250,160,40,22,239,250,239,104,157,29,23,61,131,211,173,55,148,178,195,45,114,239,110,122,50,253,11,219,23,163,210,248,102,130,8,127,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,10,33,183,188,228,197,245,240,144,228,197,140,250,11,229,61,10,4,92,93,210,76,97,99,200,90,60,91,24,198,91,72,160,108,115,44,146,24,213,186,56,211,68,136,184,233,132,70,215,74,200,60,90,220,5,49,149,199,100,52,234,247,233,57,232,248,102,130,8,128,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,12,16,189,217,247,38,30,128,222,38,230,152,69,132,27,212,160,188,103,85,8,217,229,181,205,82,143,237,182,64,124,250,160,96,89,156,144,2,49,246,116,15,131,246,43,12,180,128,69,243,247,66,220,243,189,178,53,149,11,88,124,234,154,184,233,248,102,130,8,129,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,1,57,74,97,41,76,90,179,194,155,140,31,152,93,90,98,184,126,42,231,253,233,49,51,235,18,224,83,193,111,200,215,160,95,137,140,168,187,205,223,204,178,221,102,75,67,6,6,33,199,27,93,210,95,22,177,161,91,184,20,6,182,158,131,19,248,102,130,8,130,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,103,112,177,52,7,199,86,32,64,231,47,59,233,220,114,86,198,118,92,189,68,13,190,138,219,236,10,48,248,40,66,157,160,111,215,220,18,136,191,15,243,246,10,116,29,126,157,172,94,199,178,230,6,50,51,71,200,147,106,249,137,125,110,212,143,248,102,130,8,131,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,75,43,1,85,143,228,215,22,93,122,200,115,250,158,169,70,25,52,81,214,78,250,209,182,147,138,134,47,53,133,88,87,160,59,32,113,164,14,153,251,217,71,182,253,5,73,55,182,39,192,34,97,69,183,103,205,203,187,194,36,70,173,185,23,7,248,102,130,8,132,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,15,233,179,29,152,206,82,201,140,211,90,51,233,23,185,148,126,32,174,149,151,138,44,47,104,14,185,215,59,128,227,41,160,24,13,229,18,179,12,117,41,197,129,122,245,15,214,53,86,32,98,217,17,213,152,140,120,18,2,112,248,178,76,220,211,248,102,130,8,133,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,27,160,161,196,160,222,201,44,131,228,225,54,27,228,31,163,142,11,119,23,90,147,120,45,2,196,71,105,162,168,100,147,19,42,160,75,97,47,37,198,201,170,51,135,116,113,197,51,7,146,240,100,221,178,171,97,23,55,151,180,204,211,228,88,198,114,91,248,102,130,8,134,128,131,71,231,196,148,15,144,93,155,53,77,8,25,45,124,154,160,244,213,121,99,205,237,156,103,128,132,242,167,95,228,28,160,241,60,107,86,50,214,254,110,175,12,193,100,102,191,4,124,183,64,185,3,184,246,209,186,59,96,251,236,41,222,24,79,160,36,231,152,200,149,21,12,16,150,119,91,159,3,148,187,238,224,214,129,129,154,82,231,161,0,249,96,213,248,194,221,218,192}
	start := time.Now()
	for _, h := range hash {
		e := cache.Set(string(h[:]),data)
		if e != nil {
			fmt.Printf(e.Error())
		}
	}

	elapsedTime := time.Since(start)
	fmt.Printf("%s\n",elapsedTime)
}

func GCTest() {
	cache, _ := bigcache.NewBigCache(bigcache.Config{
		Shards:             256,
		LifeWindow:         1 * time.Second,
		CleanWindow:  		100 * time.Second,
		MaxEntriesInWindow: 10000,
		MaxEntrySize:       256,
		Verbose:            false,
	})
	printMem()
	insertCache(cache, 0)
	printMem()
	runtime.GC()
	printMem()
	loadCache(cache)

}

func insertCache(cache *bigcache.BigCache,si int){

	value := make([]Receipt, 1024)

	var rp *Receipt
	//var rpp **Receipt
	for i, r := range value {
		i := i+si
		r.Status = uint(i)

		rp = &r

		test := C.GoBytes(unsafe.Pointer(rp),C.int(unsafe.Sizeof(rp)))

		fmt.Printf("%p\n", test)

		cache.Set(string(i), test)

		printMem()
		runtime.GC()
	}
	cache.Stats()
}

func loadCache(cache *bigcache.BigCache){
	for i := 0 ;  ;i++ {
		var rec *Receipt
		v, _ := cache.Get(string(i%1024))
		rlp.DecodeBytes(v, &rec)
		//fmt.Printf("%p\n",  v)
		//fmt.Printf("%p\n",  rec)
		fmt.Printf("%p ",v)
		fmt.Printf("%p",rec)
		//fmt.Println(" ",i%1024," ",rec.Status)
		//fmt.Printf("%p",v)
		//for uint(i%1024) != rec.Status {

		//}
		//insertCache(cache, 1)

		runtime.GC()
		printMem()
	}
}
var wait sync.WaitGroup
var maxAlloc float64

type Receipt struct {
	// Consensus fields
	PostState         []byte `json:"root"`
	Status            uint   `json:"status"`
	CumulativeGasUsed uint64 `json:"cumulativeGasUsed" gencodec:"required"`
	Bloom             types.Bloom  `json:"logsBloom"         gencodec:"required"`
	Logs              []*types.Log `json:"logs"              gencodec:"required"`

	// Implementation fields (don't reorder!)
	TxHash          common.Hash    `json:"transactionHash" gencodec:"required"`
	ContractAddress common.Address `json:"contractAddress"`
	GasUsed         uint64         `json:"gasUsed" gencodec:"required"`
	AA				[1024*100]byte
}

func memALUTest(){
	printMem()

	cache, _ := lru.New(256)
	var wait sync.WaitGroup
	wait.Add(1)
	for goCount := 0 ; goCount < 100 ; goCount++ {
		go func() {
			rand.Seed(time.Now().UTC().UnixNano())
			for {
				for i := 0; i < 2000; i++ {
					value := make([]*Receipt, 1024 * 8)
					addCache(cache, value)
				}
				printMem()
			}
		} ()
	}

	wait.Wait()
		/*
	for i:= 0; i < 1000000 ; i++ {
		_,ok := cache.Get(fmt.Sprintf("%d",i))
		if !ok {
			fmt.Println("not")
		}

	}
*/

}





func addCache(cache *lru.Cache,value []*Receipt){
	cache.Add(fmt.Sprintf("%d", rand.Int()), value)
}
func memBigCacheTest(){

	cache, _ := bigcache.NewBigCache(bigcache.Config{
		Shards:             256,
		LifeWindow:         10 * time.Minute,
		MaxEntriesInWindow: 10000,
		MaxEntrySize:       256,
		Verbose:            false,
	})
	printMem()

	wait.Add(maxGoroutine)
	start := time.Now()
	for t := 0 ; t < maxGoroutine ; t++ {
		go testBigCacheFunc(cache, t)
	}
	fmt.Printf("gorou : %d \n", runtime.NumGoroutine())
	buf := make([]byte, 1<<16)
	runtime.Stack(buf, true)
	fmt.Printf("%s", buf)

	wait.Wait()
	elapsedTime := time.Since(start)
	fmt.Printf("%s",elapsedTime/10000000)
	printMem()
}

func testBigCacheFunc(bc *bigcache.BigCache,start int){
	defer wait.Done()
	value := make([]byte, 256)
	for i:= 0; i < 1000000/maxGoroutine ; i++ {
		e := bc.Set(fmt.Sprintf("%d",start + i),value)
		if e != nil {
			fmt.Errorf("err %s", e)
		}
	}
}

func bToMb(b uint64) uint64 {
	return b / 1024 / 1024
}

func bToKb(b uint64) uint64 {
	return b / 1024
}

var count int
func printMem(){
	count++
	fmt.Printf("")
	var  m runtime.MemStats
	runtime.ReadMemStats(&m)
	maxAlloc = math.Max(maxAlloc, float64(m.Alloc))
	fmt.Printf("maxAllo = %v MiB", bToMb(uint64(maxAlloc)))
	fmt.Printf("\tAlloc = %v KiB", bToKb(m.Alloc))
	fmt.Printf("\tTotalAlloc = %v MiB", bToMb(m.TotalAlloc))
	fmt.Printf("\tSys = %v MiB", bToMb(m.Sys))
	fmt.Printf("\tNumGC = %v", m.NumGC)
	fmt.Printf("\tfree = %v MiB\n", bToMb(m.Frees))

}